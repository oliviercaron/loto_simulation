name: Mise Ã  jour des donnÃ©es Loto

on:
  # Lancement manuel depuis lâ€™onglet "Actions"
  workflow_dispatch:

  # Lancement automatique chaque lundi Ã  5h du matin heure de Paris
  # (cron en UTC â†’ 3h UTC en Ã©tÃ©)
  schedule:
    - cron: '0 3 * * 1'

# Autorisations minimales nÃ©cessaires pour pouvoir pousser le fichier CSV mis Ã  jour
permissions:
  contents: write

# EmpÃªcher que deux exÃ©cutions se chevauchent sur la mÃªme branche
# et annuler la prÃ©cÃ©dente si un nouveau run est dÃ©clenchÃ©
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-data:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # ArrÃªt du job aprÃ¨s 15 minutes si blocage

    steps:
      # 1) RÃ©cupÃ©rer le dÃ©pÃ´t privÃ© avec le GITHUB_TOKEN fourni automatiquement
      - name: RÃ©cupÃ©rer le dÃ©pÃ´t
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Clonage rapide, historique minimal

      # 2) TÃ©lÃ©charger et dÃ©zipper les donnÃ©es FDJ avec retry en cas dâ€™Ã©chec rÃ©seau
      - name: TÃ©lÃ©charger et dÃ©zipper les donnÃ©es Loto (avec retry)
        shell: bash
        run: |
          set -euo pipefail
          PAGE="https://www.fdj.fr/jeux-de-tirage/loto/historique"

          # 3 tentatives avec pause croissante
          for i in 1 2 3; do
            URL=$(curl -s "$PAGE" \
              | grep -o 'https://www\.sto\.api\.fdj\.fr/anonymous/service-draw-info/v3/documentations/[^"]*' \
              | head -n 1 || true)

            if [ -n "${URL:-}" ]; then
              echo "Lien trouvÃ© : $URL"
              if curl -L --fail -o loto_new.zip "$URL"; then
                unzip -o loto_new.zip
                break
              fi
            fi

            echo "Tentative $i Ã©chouÃ©e, nouvel essai..." >&2
            sleep $((i*i))
          done

          # VÃ©rification finale
          [ -f loto_new.zip ] || { echo "ERREUR : tÃ©lÃ©chargement impossible aprÃ¨s 3 tentatives" >&2; exit 1; }

      # 3) Installer R (utilisation de RSPM pour accÃ©lÃ©rer lâ€™installation des paquets)
      - name: Installer R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2'
          use-public-rspm: true

      # 4) Installer les dÃ©pendances R avec mise en cache
      - name: Installer les dÃ©pendances R (avec cache)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::readr
            any::dplyr
            any::lubridate
          cache: true

      # 5) Lancer le script R qui produit loto_combined.csv Ã  la racine
      - name: ExÃ©cuter le script R
        run: Rscript combine_script.R

      # 6) DÃ©placer le fichier gÃ©nÃ©rÃ© dans static/data pour remplacer lâ€™existant
      - name: DÃ©placer le fichier combinÃ© dans static/data
        shell: bash
        run: |
          set -euo pipefail
          [ -f "loto_combined.csv" ] || { echo "ERREUR : loto_combined.csv introuvable Ã  la racine" >&2; exit 1; }
          mkdir -p static/data
          mv -f "loto_combined.csv" "static/data/loto_combined.csv"
          # Afficher les fichiers pour vÃ©rifier
          git status --porcelain || true
          ls -l static/data || true

      # 7) Commit et push uniquement si le fichier a changÃ©
      - name: Commit et push si changement
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ðŸ“Š Chore: mise Ã  jour des donnÃ©es Loto"
          file_pattern: 'static/data/loto_combined.csv'
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
